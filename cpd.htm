<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Acompanhamento CPD de SICs</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #f4f4f4;
        }
        .container {
            background-color: #fff;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            max-width: 1200px;
            margin: auto;
            /* display: none; */ /* Controlado pelo script */
        }
        h1 {
            color: #333;
            text-align: center;
            margin-bottom: 30px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 10px;
            text-align: left;
            font-size: 14px;
        }
        th {
            background-color: #f2f2f2;
            color: #333;
        }
        tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        .status-badge {
            display: inline-block;
            padding: 5px 8px;
            border-radius: 4px;
            font-size: 0.8em;
            color: white;
            font-weight: bold;
            white-space: nowrap;
        }
        /* Status Logístico */
        .status-badge.AguardandoAgendamento { background-color: #6c757d; }
        .status-badge.EntregaAgendada { background-color: #17a2b8; }
        .status-badge.EmTransito { background-color: #007bff; }
        .status-badge.EntregaRecebida { background-color: #28a745; }
        .status-badge.ProblemaNaEntrega { background-color: #dc3545; }
        .status-badge.Devolucao { background-color: #6f42c1; }
        /* Status CPD */
        .status-badge.PendenteNF { background-color: #ffc107; color: #333;}
        .status-badge.NFRecebida { background-color: #17a2b8; }
        .status-badge.NFemAnalise { background-color: #007bff; }
        .status-badge.NFLancada { background-color: #28a745; }
        .status-badge.NFComProblema { background-color: #dc3545; }
        
        .actions-cpd select {
            padding: 5px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
            margin-right: 5px;
            min-width: 150px;
        }
        .actions-cpd button {
            padding: 6px 10px;
            background-color: #6f42c1;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
        }
        .actions-cpd button:hover {
            background-color: #5a36a3;
        }

        .no-sics {
            text-align: center;
            color: #666;
            padding: 20px;
            border: 1px dashed #ccc;
            border-radius: 5px;
            margin-top: 20px;
        }
        #message {
            margin-top: 20px;
            padding: 10px;
            border-radius: 4px;
            text-align: center;
            display: none;
        }
        .success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        .error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
            margin-top: 10px; /* Adicionado para garantir espaçamento */
        }
        /* Estilos para a navegação */
        nav {
            margin-bottom: 20px;
            text-align: center;
        }
        nav a {
            margin: 0 10px;
            text-decoration: none;
            color: #007bff;
            font-weight: bold;
        }
        nav a:hover {
            text-decoration: underline;
        }

        /* Container de Seleção de Unidade */
        .unit-selection-container {
            background-color: #fff;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            max-width: 400px;
            margin: auto;
            text-align: center;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            min-height: calc(100vh - 40px);
        }
        .unit-selection-container h2 {
            margin-bottom: 20px;
            color: #333;
        }
        .unit-selection-container select {
            width: 100%;
            margin-bottom: 20px;
        }
        .unit-selection-container button {
            background-color: #007bff;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            width: 100%;
        }
        .unit-selection-container button:hover {
            background-color: #0056b3;
        }
        #unitSelectionError {
            color: red;
            margin-top: 10px;
            display: none;
        }

        /* Overlay e Modal de Senha (para a unidade) */
        .password-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
        .password-modal {
            background-color: #fff;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            text-align: center;
            width: 300px;
        }
        .password-modal h2 {
            margin-bottom: 20px;
            color: #333;
        }
        .password-modal input[type="password"] {
            width: calc(100% - 22px);
            padding: 10px;
            margin-bottom: 15px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
        }
        .password-modal button {
            background-color: #007bff;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            width: 100%;
        }
        .password-modal button:hover {
            background-color: #0056b3;
        }
        #passwordError {
            color: red;
            margin-top: 10px;
            display: none;
        }
    </style>
</head>
<body>
    <div class="unit-selection-container" id="unitSelectionContainer">
        <h2>Selecione a Unidade - CPD</h2>
        <select id="selectUnitForAccess">
            <option value="">Selecione a Unidade</option>
            <option value="TPH">TPH</option>
            <option value="API">API</option>
            <option value="MCD">MCD</option>
            <option value="TCG">TCG</option>
            <option value="ABC">ABC</option>
            <option value="TCV">TCV</option>
            <option value="TBL">TBL</option>
            <option value="TSJ">TSJ</option>
            <option value="TBA">TBA</option>
            <option value="TPA">TPA</option>
            <option value="TCA">TCA</option>
        </select>
        <button id="proceedToPassword">Prosseguir</button>
        <p id="unitSelectionError"></p>
    </div>

    <div class="password-overlay" id="passwordOverlay" style="display: none;">
        <div class="password-modal">
            <h2>Senha de Acesso - Unidade <span id="selectedUnitName"></span></h2>
            <p>Por favor, insira a senha para a unidade selecionada.</p>
            <input type="password" id="accessPassword" placeholder="Senha da Unidade">
            <button id="submitPassword">Acessar</button>
            <p id="passwordError"></p>
        </div>
    </div>

    <div class="container" id="appContainer" style="display: none;">
        <h1>Acompanhamento CPD - Unidade <span id="currentUnitDisplay"></span></h1>

        <div id="sicListCPD">
        </div>

        <div id="message"></div>
    </div>

    <script>
        // *** IMPORTANTE: COLOQUE A URL DA SUA IMPLANTAÇÃO DO GOOGLE APPS SCRIPT AQUI ***
        const WEB_APP_URL = 'https://script.google.com/macros/s/AKfycbyMSn_ug8ybd_U0psLApK1TjCjo4Tsfvz4EUKe6C3bF5fYuwDePoRTrAG6sjk2JKPdO/exec'; // Ex: 'https://script.google.com/macros/s/AKfycb.../exec'

        // --- Senhas Individuais por Unidade (MUDE ESTAS SENHAS!) ---
        const UNIT_PASSWORDS = {
            "TPH": "tphcpd123",
            "API": "apicpd123",
            "MCD": "mcdcpd123", 
            "TCG": "tcgcpd123", 
            "ABC": "abccpd123", 
            "TCV": "tcvcpd123", 
            "TBL": "tblcpd123",
            "TSJ": "tsjcpd123",
            "TBA": "tbacpd123",
            "TPA": "tpacpd123",
            "TCA": "tcacpd123"
        };

        // --- Mapeamento de Unidades por Grupo Operacional ---
        const OPERATIONAL_GROUPS = {
            "TPA": ["TPA", "TBA"],
            "TBA": ["TPA", "TBA"], // Inclui TBA para consistência, aponta para o mesmo grupo de TPA
            "MCD": ["MCD", "TCG"],
            "TCG": ["MCD", "TCG"],
            "TCV": ["TCV", "ABC"],
            "ABC": ["TCV", "ABC"],
            "TPH": ["TPH"],
            "API": ["API"],
            "TBL": ["TBL"],
            "TSJ": ["TSJ"],
            "TCA": ["TCA"]
        };

        const unitSelectionContainer = document.getElementById('unitSelectionContainer');
        const selectUnitForAccess = document.getElementById('selectUnitForAccess');
        const proceedToPasswordBtn = document.getElementById('proceedToPassword');
        const unitSelectionError = document.getElementById('unitSelectionError');
        
        const passwordOverlay = document.getElementById('passwordOverlay');
        const selectedUnitNameSpan = document.getElementById('selectedUnitName');
        const accessPasswordInput = document.getElementById('accessPassword');
        const submitPasswordBtn = document.getElementById('submitPassword');
        const passwordError = document.getElementById('passwordError');
        
        const appContainer = document.getElementById('appContainer');
        const currentUnitDisplay = document.getElementById('currentUnitDisplay');

        let selectedUnit = ''; // Variável para armazenar a unidade escolhida (a que foi usada para o login)

        // --- Lógica de Seleção de Unidade ---
        proceedToPasswordBtn.addEventListener('click', function() {
            selectedUnit = selectUnitForAccess.value;
            if (selectedUnit === '') {
                unitSelectionError.textContent = 'Por favor, selecione uma unidade.';
                unitSelectionError.style.display = 'block';
                return;
            }
            unitSelectionError.style.display = 'none';

            sessionStorage.setItem('cpdSelectedUnit', selectedUnit);

            selectedUnitNameSpan.textContent = selectedUnit;
            unitSelectionContainer.style.display = 'none';
            passwordOverlay.style.display = 'flex';
            accessPasswordInput.focus();
        });

        // --- Lógica de Senha por Unidade ---
        submitPasswordBtn.addEventListener('click', function() {
            const enteredPassword = accessPasswordInput.value;
            // Verifica a senha usando a unidade selecionada (que tem senha individual)
            if (enteredPassword === UNIT_PASSWORDS[selectedUnit]) {
                passwordOverlay.style.display = 'none';
                appContainer.style.display = 'block';
                sessionStorage.setItem('cpdAccessGranted', 'true');
                
                // Exibe o nome da unidade que foi usada para o login
                currentUnitDisplay.textContent = selectedUnit; 
                
                // Renderiza as SICs do grupo operacional da unidade selecionada
                renderSicsForCPD(selectedUnit);
            } else {
                passwordError.textContent = 'Senha incorreta.';
                passwordError.style.display = 'block';
            }
        });

        // Verifica o estado de acesso no carregamento
        document.addEventListener('DOMContentLoaded', function() {
            selectedUnit = sessionStorage.getItem('cpdSelectedUnit');
            const accessGranted = sessionStorage.getItem('cpdAccessGranted') === 'true';

            if (selectedUnit && accessGranted) {
                unitSelectionContainer.style.display = 'none';
                passwordOverlay.style.display = 'none';
                appContainer.style.display = 'block';
                currentUnitDisplay.textContent = selectedUnit;
                renderSicsForCPD(selectedUnit);
            } else if (selectedUnit) {
                unitSelectionContainer.style.display = 'none';
                passwordOverlay.style.display = 'flex';
                selectedUnitNameSpan.textContent = selectedUnit;
                appContainer.style.display = 'none';
            } else {
                unitSelectionContainer.style.display = 'flex';
                passwordOverlay.style.display = 'none';
                appContainer.style.display = 'none';
            }
        });

        // --- Lógica de Carregamento de SICs do Apps Script (via GET) ---
        async function fetchSicsFromAppsScript(unitsToFilter) {
            try {
                const formData = new FormData();
                formData.append('action', 'getSicsForCPD');
                formData.append('units', JSON.stringify(unitsToFilter)); // Envia o array de unidades como JSON string

                const response = await fetch(WEB_APP_URL, {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                
                if (result.status === 'success') {
                    // Armazena as SICs localmente para re-renderização rápida
                    saveSics(result.data); 
                    return result.data;
                } else {
                    displayMessage(`Erro ao buscar SICs: ${result.message}`, 'error');
                    console.error('Erro ao buscar SICs:', result.message);
                    return [];
                }
            } catch (error) {
                displayMessage('Erro ao conectar com o servidor para buscar SICs.', 'error');
                console.error('Erro na requisição fetch para buscar SICs:', error);
                return [];
            }
        }

        // --- Lógica de Salvamento e Display de SICs ---
        // As funções getSics e saveSics agora serão mais para cache local.
        // A fonte principal dos dados será o Apps Script.
        function getSics() {
            const sics = localStorage.getItem('sics');
            return sics ? JSON.parse(sics) : [];
        }

        function saveSics(sics) {
            localStorage.setItem('sics', JSON.stringify(sics));
        }

        function displayMessage(text, type) {
            const messageDiv = document.getElementById('message');
            messageDiv.textContent = text;
            messageDiv.className = type;
            messageDiv.style.display = 'block';
            setTimeout(() => {
                messageDiv.style.display = 'none';
            }, 5000);
        }

        async function renderSicsForCPD(unitMakingTheAccess) {
            const sicListDiv = document.getElementById('sicListCPD');
            sicListDiv.innerHTML = '<p style="text-align: center;">Carregando SICs...</p>'; // Feedback de carregamento

            const unitsInGroup = OPERATIONAL_GROUPS[unitMakingTheAccess] || [unitMakingTheAccess];
            const sicsToDisplay = await fetchSicsFromAppsScript(unitsInGroup); // Busca do Apps Script

            if (sicsToDisplay.length === 0) {
                sicListDiv.innerHTML = `<p class="no-sics">Não há SICs cadastradas para o grupo operacional de ${unitMakingTheAccess}.</p>`;
                return;
            }

            let tableHTML = `
                <table>
                    <thead>
                        <tr>
                            <th>Número SIC</th>
                            <th>Unidade</th>
                            <th>Fornecedor</th>
                            <th>Status Logístico</th>
                            <th>Status CPD Atual</th>
                            <th>Atualizar Status CPD</th>
                        </tr>
                    </thead>
                    <tbody>
            `;

            sicsToDisplay.forEach(sic => {
                const statusLogisticoClass = (sic.statusLogistico || 'N/A').replace(/\s/g, '').replace(/[^a-zA-Z0-9]/g, '');
                const statusCPDClass = (sic.statusCPD || 'N/A').replace(/\s/g, '').replace(/[^a-zA-Z0-9]/g, '');

                tableHTML += `
                    <tr>
                        <td>${sic.numeroSic || 'N/A'}</td>
                        <td>${sic.unidade || 'N/A'}</td>
                        <td>${sic.fornecedor || 'N/A'}</td>
                        <td><span class="status-badge ${statusLogisticoClass}">${sic.statusLogistico || 'N/A'}</span></td>
                        <td><span class="status-badge ${statusCPDClass}">${sic.statusCPD || 'N/A'}</span></td>
                        <td class="actions-cpd">
                            <select class="new-status-cpd" data-sic="${sic.numeroSic}">
                                <option value="Pendente NF" ${sic.statusCPD === 'Pendente NF' ? 'selected' : ''}>Pendente NF</option>
                                <option value="NF Recebida" ${sic.statusCPD === 'NF Recebida' ? 'selected' : ''}>NF Recebida</option>
                                <option value="NF em Analise" ${sic.statusCPD === 'NF em Analise' ? 'selected' : ''}>NF em Análise</option>
                                <option value="NF Lancada" ${sic.statusCPD === 'NF Lancada' ? 'selected' : ''}>NF Lançada</option>
                                <option value="NF Com Problema" ${sic.statusCPD === 'NF Com Problema' ? 'selected' : ''}>NF Com Problema</option>
                            </select>
                            <button class="update-cpd-btn" data-sic="${sic.numeroSic}">Atualizar</button>
                        </td>
                    </tr>
                `;
            });

            tableHTML += `
                    </tbody>
                </table>
            `;
            sicListDiv.innerHTML = tableHTML;

            document.querySelectorAll('.update-cpd-btn').forEach(button => {
                button.addEventListener('click', async function() { // Adicionado 'async' aqui
                    const numeroSic = this.dataset.sic;
                    const selectElement = this.previousElementSibling;
                    const newStatus = selectElement.value;
                    await updateSicStatusCPD(numeroSic, newStatus); // Adicionado 'await' aqui
                });
            });
        }

        async function updateSicStatusCPD(numeroSic, newStatus) {
            displayMessage('Atualizando status...', 'info'); // Mensagem de carregamento

            const formData = new FormData();
            formData.append('action', 'updateStatus');
            formData.append('numeroSic', numeroSic);
            formData.append('newStatus', newStatus);
            formData.append('statusField', 'Status CPD'); // Nome da coluna na planilha
            formData.append('sendEmail', 'true'); // Indicador para enviar e-mail

            try {
                const response = await fetch(WEB_APP_URL, {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();

                if (result.status === 'success') {
                    displayMessage(`Status CPD da SIC ${numeroSic} atualizado para "${newStatus}".`, 'success');
                    // Re-renderiza a tabela para mostrar o status atualizado
                    await renderSicsForCPD(selectedUnit); 
                } else {
                    displayMessage(`Erro ao atualizar SIC: ${result.message}`, 'error');
                    console.error('Erro do servidor ao atualizar SIC:', result.message);
                }
            } catch (error) {
                displayMessage('Erro ao conectar com o servidor. Tente novamente.', 'error');
                console.error('Erro na requisição fetch ao atualizar SIC:', error);
            }
        }
    </script>
</body>
</html>